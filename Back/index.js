const config = require('./config.json');
const csv = require('csv-parser');
const fs = require('fs');
const express = require('express');
const app = express();

/** 
  * @desc Generate a machines array to store all incoming data.
  * @returns object - [{
  *     name: 'machine1',
  *     metrics [{
  *         name: 'metric1',
  *         values: []
  *     }]
  * }]
*/
function createDataStructure() {
    const machines=[];
    config.machines.forEach(element => {
        machines.push({
            name: element,
            metrics: config.metrics.map(metric => {
                return {
                    name: metric,
                    values: []
                }
            })
        });
    });

    return machines;
}

/** 
  * @desc Process each CSV row and store the data into the machine array.
  * @param  string $machines - the machines array
  * @param  string $row - CSV row generated by csv-parser
  * @returns null
*/
function ProcessRow(machines, row) {
   const machineIndex = config.machines.indexOf(row[config.fileds.machine]);
   if(machineIndex != -1)
   {
        const metricIndex = config.metrics.indexOf(row[config.fileds.metric]);
        if(metricIndex != -1) {
            const time = Number(row[config.fileds.time]);
            const value = Number(row[config.fileds.value]);
            if(value >= config.filters.minValue && value <= config.filters.maxValue && time >= config.filters.timeFrom && time <= config.filters.timeTo) {
                machines[machineIndex].metrics[metricIndex].values.push({time, value})
            }            
        }
   }
}

app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Headers', 'Authorization, X-API-KEY, Origin, X-Requested-With, Content-Type, Accept, Access-Control-Allow-Request-Method');
    res.header('Access-Control-Allow-Methods', 'GET');
    res.header('Allow', 'GET');
    next();
});

app.get('/', function (req, res) {
    const machines = createDataStructure();

    // Open the file
    fs.createReadStream(config.dataFile)
    .pipe(csv(config.dataHeaders))
    .on('data', (row) => {
        // Process each row
        ProcessRow(machines, row);
    })
    .on('end', () => {
        // Send the response after process all the file.
        res.send({
            config: config,
            machines: machines,
            updated: new Date().getTime()
        });
    });
});

app.listen(config.serverPort, function () {
    console.log('Example app listening on port', config.serverPort);
});